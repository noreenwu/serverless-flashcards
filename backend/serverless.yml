service:
  name: serverless-flashcards-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev-v1'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    FLASHCARDS_TABLE: Flashcards-${self:provider.stage}

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Flashcards API
        description: Serverless backend for Flashcards


functions:
  GetFlashcards:
    handler: src/lambda/http/getFlashcards.handler
    iamRoleStatementsName: getFlashcards-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        # Resource: arn:aws:dynamodb:${self:provider.region}:*:table/Flashcards}
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FLASHCARDS_TABLE}

    events:
      - http:
          method: get
          path: flashcards
          cors: true       

  CreateFlashcard:
    handler: src/lambda/http/createFlashcard.handler
    iamRoleStatementsName: createFlashcard-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FLASHCARDS_TABLE}
    events:
      - http:
          method: post
          path: flashcards
          cors: true
          request:
            schema:
              application/json: ${file(reqmodels/create-flashcard-request.json)}
  # # TODO: Configure this function
  # UpdateTodo:
  #   handler: src/lambda/http/updateTodo.handler
  #   events:
  #     - http:
  #         method: patch
  #         path: todos/{todoId}

  DeleteFlashcard:
    handler: src/lambda/http/deleteFlashcard.handler
    iamRoleStatementsName: deleteFlashcard-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FLASHCARDS_TABLE}    
    events:
      - http:
          method: delete
          path: flashcards/{flashcardId}
          cors: true
          request:
            parameters:
              paths:
                flashcardId: true          

  # # TODO: Configure this function
  # GenerateUploadUrl:
  #   handler: src/lambda/http/generateUploadUrl.handler
  #   events:
  #     - http:
  #         method: post
  #         path: todos/{todoId}/attachment


resources:
  Resources:
    FlashcardsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S         
          - AttributeName: flashcardId
            AttributeType: S            
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: flashcardId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.FLASHCARDS_TABLE}